1. eclipse install 
http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/R/eclipse-jee-mars-R-win32.zip
http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/mars/1/eclipse-jee-mars-1-win32-x86_64.zip
2. maven install
help->install new software->add
http://download.eclipse.org/technology/m2e/releases
windows->preferences->maven->installations->add (install package)
http://maven.apache.org/plugins/maven-eclipse-plugin/download.cgi
3. new project
new->maven project
4. tomcat plugin 
http://tomcat.apache.org/maven-plugin-2.2/run-mojo-features.html
<build><plugins>
<plugin>
	<groupId>org.apache.tomcat.maven</groupId>
	<artifactId>tomcat7-maven-plugin</artifactId>
	<!-- or if you want to use tomcat 6.x <artifactId>tomcat6-maven-plugin</artifactId> -->
	<version>2.2</version>
	<configuration>
		<!-- http port -->
		<port>9090</port>
		<!-- application path always starts with / -->
		<path>/</path>
		<!-- optional path to a context file -->
		<contextFile>${tomcatContextXml}</contextFile>
		<!-- optional system propoerties you want to add -->
		<systemProperties>
			<appserver.base>${project.build.directory}/appserver-base</appserver.base>
			<appserver.home>${project.build.directory}/appserver-home</appserver.home>
			<derby.system.home>${project.build.directory}/appserver-base/logs</derby.system.home>
			<java.io.tmpdir>${project.build.directory}</java.io.tmpdir>
		</systemProperties>
		<!-- if you want to use test dependencies rather than only runtime -->
		<useTestClasspath>false</useTestClasspath>
		<!-- optional if you want to add some extra directories into the classloader -->
		<additionalClasspathDirs>
			<additionalClasspathDir></additionalClasspathDir>
		</additionalClasspathDirs>
	</configuration>
	<!-- For any extra dependencies needed when running embedded Tomcat (not 
		WAR dependencies) add them below -->
	<dependencies>
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.4</version>
		</dependency>
	</dependencies>
</plugin>
......
5. run as -> run configuration -> (Goals) tomcat7:run  ==> mvn spring-boot:run
run as -> maven build ( download )


mvn -X spring-boot:run -Drun.jvmArguments="-Xss8m"
(run configuration:  spring-boot:run)

http://dev.mysql.com/downloads/workbench/

function MyCtrl($scope) {
    angular.element(document).ready(function () {
        console.log('Hello World');
    });
}

https://spring.io/guides/gs/uploading-files/

https://developer.paypal.com/docs/classic/express-checkout/ht_ec-singleItemPayment-curl-etc/
https://developer.paypal.com/docs/classic/express-checkout/integration-guide/ECOnMobileDevices/
https://github.com/paypal/PayPal-Java-SDK
https://github.com/paypal/PayPal-Java-SDK/tree/master/rest-api-sample  configuration:
* Simply run `mvn install` to build war file.
* Run `mvn jetty:run` to run the war file using maven jetty.
* Access `http://localhost:<jetty-port>/rest-api-sample/` in your browser to play with the test pages, `<jetty-port>` is configurable in pom.xml.